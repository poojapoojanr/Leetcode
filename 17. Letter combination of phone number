from itertools import combinations
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        phone = {
            '2' : ['a','b','c'],
            '3' : ['d','e','f'],
            '4' : ['g','h','i'],
            '5' : ['j','k','l'],
            '6' : ['m','n','o'],
            '7' : ['p','q','r','s'],
            '8' : ['t','u','v'],
            '9' : ['w','x','y','z']
        }
        n = len(digits)
        if n == 0:
            return []
        if n == 1:
            return phone[digits[0]]

        res = []

        def backtrack(index: int, path: str):
            if index == n:
                res.append(path)
                return
            for char in phone[digits[index]]:
                backtrack(index + 1, path + char)

        backtrack(0, "")
        return res

        
      
